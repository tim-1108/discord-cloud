import { ref, type Ref } from "vue";

const cache = new Map<number, Ref<Blob>>();

async function fetchThumbnail(link: string): Promise<Blob | null> {
    try {
        const response = await fetch(link);
        // The response of this should always be a jpeg image,
        // as that is what is generated by the thumbnail service.
        if (!response.ok || response.headers.get("content-type") !== "image/jpeg") {
            return null;
        }

        return response.blob();
    } catch {
        return null;
    }
}

async function get(id: number, link: string): Promise<Ref<Blob> | null> {
    const hit = cache.get(id);
    if (hit) {
        return hit;
    }

    const blob = await fetchThumbnail(link);
    if (!blob) {
        return null;
    }
    const val = ref(blob);
    cache.set(id, val);
    return val;
}

function invalidate(id: number) {
    return cache.delete(id);
}

/**
 * Overwrites the cached thumbnail blob to a new link.
 * Useful when thumbnail containers have the active ref
 * and the file is updated. That should be reflected in
 * the changing of the rendered thumbnail.
 *
 * If the thumbnail is not cached, it will not be downloaded
 * upon calling this function. If it were, files being uploaded
 * in folders the user is not viewing would result in them
 * downloading thumbnails for files they may never look at.
 * Only when `get` is called will the thumbnail be actually
 * fetched (like when a thumbnail container is mounted/in view)
 */
async function overwrite(id: number, link: string): Promise<boolean> {
    const hit = cache.get(id);
    if (!hit) {
        return false;
    }
    const blob = await fetchThumbnail(link);
    if (!blob) {
        return false;
    }
    hit.value = blob;
    return true;
}

export const Thumbnails = {
    get,
    invalidate,
    overwrite
} as const;
